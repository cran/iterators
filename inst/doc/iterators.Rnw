% \VignetteIndexEntry{iterators Manual}
% \VignetteDepends{iterators}
% \VignettePackage{iterators}
\documentclass[12pt]{article}
\usepackage{amsmath}
\usepackage[pdftex]{graphicx}
\usepackage{color}
\usepackage{xspace}
\usepackage{fancyvrb}
\usepackage{fancyhdr}
    \usepackage[
         colorlinks=true,
         linkcolor=blue,
         citecolor=blue,
         urlcolor=blue]
         {hyperref}
         \usepackage{lscape}

\usepackage{Sweave}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% define new colors for use
\definecolor{darkgreen}{rgb}{0,0.6,0}
\definecolor{darkred}{rgb}{0.6,0.0,0}
\definecolor{lightbrown}{rgb}{1,0.9,0.8}
\definecolor{brown}{rgb}{0.6,0.3,0.3}
\definecolor{darkblue}{rgb}{0,0,0.8}
\definecolor{darkmagenta}{rgb}{0.5,0,0.5}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\newcommand{\bld}[1]{\mbox{\boldmath $#1$}}
\newcommand{\shell}[1]{\mbox{$#1$}}
\renewcommand{\vec}[1]{\mbox{\bf {#1}}}

\newcommand{\ReallySmallSpacing}{\renewcommand{\baselinestretch}{.6}\Large\normalsize}
\newcommand{\SmallSpacing}{\renewcommand{\baselinestretch}{1.1}\Large\normalsize}

\newcommand{\halfs}{\frac{1}{2}}

\setlength{\oddsidemargin}{-.25 truein}
\setlength{\evensidemargin}{0truein}
\setlength{\topmargin}{-0.2truein}
\setlength{\textwidth}{7 truein}
\setlength{\textheight}{8.5 truein}
\setlength{\parindent}{0.20truein}
\setlength{\parskip}{0.10truein}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\pagestyle{fancy}
\lhead{}
\chead{Using The {\tt iterators} Package}
\rhead{}
\lfoot{}
\cfoot{}
\rfoot{\thepage}
\renewcommand{\headrulewidth}{1pt}
\renewcommand{\footrulewidth}{1pt}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\title{Using The {\tt iterators} Package}
\author{Rich Calaway \\ richcalaway@revolution-computing.com}


\begin{document}

\maketitle

\thispagestyle{empty}
\section{Introduction}

An {\em iterator} is a special type of object that generalizes the notion of 
a looping variable. When passed as an argument to a function that knows what 
to do with it, the iterator supplies a sequence of values. The iterator also 
maintains information about its state, in particular its current index. The
\texttt{iterators} package includes a number of functions for creating 
iterators, the simplest of which is \texttt{iter}, which takes
virtually any R object and turns it into an iterator object. The simplest 
function that operates on iterators is the \texttt{nextElem} function, which 
when given an iterator, returns the next value of the iterator. For example, 
here we create an iterator object from the sequence 1 to 10, and then use 
\texttt{nextElem} to iterate through the values:
<<ex1>>=
library(iterators)
i1 <- iter(1:10)
nextElem(i1)
nextElem(i1)
@

You can create iterators from matrices and data frames, using the \texttt{by} argument to specify whether to iterate by row or column:
<<ex2>>=
istate <- iter(state.x77, by='row')
nextElem(istate)
nextElem(istate)
@

Iterators can also be created from functions, in which case the iterator can be an endless source of values:
<<ex3>>=
ifun <- iter(function() sample(0:9, 4, replace=TRUE))
nextElem(ifun)
nextElem(ifun)
@

For practical applications, iterators can be paired with \texttt{foreach} to obtain parallel results quite easily:
<<ex4>>=
library(foreach)
x <- matrix(rnorm(1000000), ncol=10000)
itx <- iter(x, by='row')
foreach(i=itx, .combine=c) %dopar% mean(i)
@

\section{Some Special Iterators}

The notion of an iterator is new to R, but should be familiar to users of
languages such as Python. The \texttt{iterators} package includes a number of
special functions that generate iterators for some common scenarios. For 
example, the
\texttt{irnorm} function creates an iterator for which each value is drawn
from a specified random normal distribution:
<<ex5>>=
library(iterators)
itrn <- irnorm(10)
nextElem(itrn)
nextElem(itrn)
@

Similarly, the \texttt{irunif}, \texttt{irbinom}, and \texttt{irpois} functions
create iterators which drawn their values from uniform, binomial, and Poisson
distributions, respectively.

We can then use these functions just as we used \texttt{irnorm}:
<<ex6>>=
itru <- irunif(10)
nextElem(itru)
nextElem(itru)
@

The \texttt{icount} function returns an iterator that counts starting from one:
<<ex7>>=
it <- icount(3)
nextElem(it)
nextElem(it)
nextElem(it)
@

\end{document}
